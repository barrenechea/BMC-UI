/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as TabLayoutRouteImport } from './routes/_tabLayout'

const IndexLazyRouteImport = createFileRoute('/')()
const TabLayoutUsbLazyRouteImport = createFileRoute('/_tabLayout/usb')()
const TabLayoutNodesLazyRouteImport = createFileRoute('/_tabLayout/nodes')()
const TabLayoutInfoLazyRouteImport = createFileRoute('/_tabLayout/info')()
const TabLayoutFlashNodeLazyRouteImport = createFileRoute(
  '/_tabLayout/flash-node',
)()
const TabLayoutFirmwareUpgradeLazyRouteImport = createFileRoute(
  '/_tabLayout/firmware-upgrade',
)()
const TabLayoutAboutLazyRouteImport = createFileRoute('/_tabLayout/about')()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const TabLayoutRoute = TabLayoutRouteImport.update({
  id: '/_tabLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const TabLayoutUsbLazyRoute = TabLayoutUsbLazyRouteImport.update({
  id: '/usb',
  path: '/usb',
  getParentRoute: () => TabLayoutRoute,
} as any).lazy(() =>
  import('./routes/_tabLayout/usb.lazy').then((d) => d.Route),
)
const TabLayoutNodesLazyRoute = TabLayoutNodesLazyRouteImport.update({
  id: '/nodes',
  path: '/nodes',
  getParentRoute: () => TabLayoutRoute,
} as any).lazy(() =>
  import('./routes/_tabLayout/nodes.lazy').then((d) => d.Route),
)
const TabLayoutInfoLazyRoute = TabLayoutInfoLazyRouteImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => TabLayoutRoute,
} as any).lazy(() =>
  import('./routes/_tabLayout/info.lazy').then((d) => d.Route),
)
const TabLayoutFlashNodeLazyRoute = TabLayoutFlashNodeLazyRouteImport.update({
  id: '/flash-node',
  path: '/flash-node',
  getParentRoute: () => TabLayoutRoute,
} as any).lazy(() =>
  import('./routes/_tabLayout/flash-node.lazy').then((d) => d.Route),
)
const TabLayoutFirmwareUpgradeLazyRoute =
  TabLayoutFirmwareUpgradeLazyRouteImport.update({
    id: '/firmware-upgrade',
    path: '/firmware-upgrade',
    getParentRoute: () => TabLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_tabLayout/firmware-upgrade.lazy').then((d) => d.Route),
  )
const TabLayoutAboutLazyRoute = TabLayoutAboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => TabLayoutRoute,
} as any).lazy(() =>
  import('./routes/_tabLayout/about.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/about': typeof TabLayoutAboutLazyRoute
  '/firmware-upgrade': typeof TabLayoutFirmwareUpgradeLazyRoute
  '/flash-node': typeof TabLayoutFlashNodeLazyRoute
  '/info': typeof TabLayoutInfoLazyRoute
  '/nodes': typeof TabLayoutNodesLazyRoute
  '/usb': typeof TabLayoutUsbLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/about': typeof TabLayoutAboutLazyRoute
  '/firmware-upgrade': typeof TabLayoutFirmwareUpgradeLazyRoute
  '/flash-node': typeof TabLayoutFlashNodeLazyRoute
  '/info': typeof TabLayoutInfoLazyRoute
  '/nodes': typeof TabLayoutNodesLazyRoute
  '/usb': typeof TabLayoutUsbLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_tabLayout': typeof TabLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_tabLayout/about': typeof TabLayoutAboutLazyRoute
  '/_tabLayout/firmware-upgrade': typeof TabLayoutFirmwareUpgradeLazyRoute
  '/_tabLayout/flash-node': typeof TabLayoutFlashNodeLazyRoute
  '/_tabLayout/info': typeof TabLayoutInfoLazyRoute
  '/_tabLayout/nodes': typeof TabLayoutNodesLazyRoute
  '/_tabLayout/usb': typeof TabLayoutUsbLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/about'
    | '/firmware-upgrade'
    | '/flash-node'
    | '/info'
    | '/nodes'
    | '/usb'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/about'
    | '/firmware-upgrade'
    | '/flash-node'
    | '/info'
    | '/nodes'
    | '/usb'
  id:
    | '__root__'
    | '/'
    | '/_tabLayout'
    | '/login'
    | '/_tabLayout/about'
    | '/_tabLayout/firmware-upgrade'
    | '/_tabLayout/flash-node'
    | '/_tabLayout/info'
    | '/_tabLayout/nodes'
    | '/_tabLayout/usb'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  TabLayoutRoute: typeof TabLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_tabLayout': {
      id: '/_tabLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof TabLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_tabLayout/usb': {
      id: '/_tabLayout/usb'
      path: '/usb'
      fullPath: '/usb'
      preLoaderRoute: typeof TabLayoutUsbLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
    '/_tabLayout/nodes': {
      id: '/_tabLayout/nodes'
      path: '/nodes'
      fullPath: '/nodes'
      preLoaderRoute: typeof TabLayoutNodesLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
    '/_tabLayout/info': {
      id: '/_tabLayout/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof TabLayoutInfoLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
    '/_tabLayout/flash-node': {
      id: '/_tabLayout/flash-node'
      path: '/flash-node'
      fullPath: '/flash-node'
      preLoaderRoute: typeof TabLayoutFlashNodeLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
    '/_tabLayout/firmware-upgrade': {
      id: '/_tabLayout/firmware-upgrade'
      path: '/firmware-upgrade'
      fullPath: '/firmware-upgrade'
      preLoaderRoute: typeof TabLayoutFirmwareUpgradeLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
    '/_tabLayout/about': {
      id: '/_tabLayout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof TabLayoutAboutLazyRouteImport
      parentRoute: typeof TabLayoutRoute
    }
  }
}

interface TabLayoutRouteChildren {
  TabLayoutAboutLazyRoute: typeof TabLayoutAboutLazyRoute
  TabLayoutFirmwareUpgradeLazyRoute: typeof TabLayoutFirmwareUpgradeLazyRoute
  TabLayoutFlashNodeLazyRoute: typeof TabLayoutFlashNodeLazyRoute
  TabLayoutInfoLazyRoute: typeof TabLayoutInfoLazyRoute
  TabLayoutNodesLazyRoute: typeof TabLayoutNodesLazyRoute
  TabLayoutUsbLazyRoute: typeof TabLayoutUsbLazyRoute
}

const TabLayoutRouteChildren: TabLayoutRouteChildren = {
  TabLayoutAboutLazyRoute: TabLayoutAboutLazyRoute,
  TabLayoutFirmwareUpgradeLazyRoute: TabLayoutFirmwareUpgradeLazyRoute,
  TabLayoutFlashNodeLazyRoute: TabLayoutFlashNodeLazyRoute,
  TabLayoutInfoLazyRoute: TabLayoutInfoLazyRoute,
  TabLayoutNodesLazyRoute: TabLayoutNodesLazyRoute,
  TabLayoutUsbLazyRoute: TabLayoutUsbLazyRoute,
}

const TabLayoutRouteWithChildren = TabLayoutRoute._addFileChildren(
  TabLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  TabLayoutRoute: TabLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
